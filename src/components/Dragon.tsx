/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 -t ./public/models/dragon.gltf
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { Edges, useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import {
  DebugLayerMaterial,
  Depth,
  Displace,
  Fresnel,
  LayerMaterial,
  Noise,
} from "lamina";
import { useControls } from "leva";
import { MaterialProps, useFrame } from "@react-three/fiber";
import { Mesh } from "three";
import * as LAYERS from "lamina/vanilla";
import {
  LayerMaterialParameters,
  LayerMaterialProps,
  LayerProps,
} from "lamina/types";

type GLTFResult = GLTF & {
  nodes: {
    dragon: THREE.Mesh;
  };
  materials: {
    ["Default OBJ.001"]: THREE.MeshStandardMaterial;
  };
};

export function Dragon(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("./models/dragon.gltf") as GLTFResult;
  const { gradient } = useControls({
    gradient: { value: 0.7, min: 0, max: 1 },
  });
  const ref = useRef<any>(null!);

  // Animate gradient
  useFrame((state) => {
    const sin = Math.sin(state.clock.elapsedTime / 2);
    const cos = Math.cos(state.clock.elapsedTime / 2);
    ref.current.layers[0].origin.set(cos / 2, 0, 0);
    ref.current.layers[1].origin.set(cos, sin, cos);
    ref.current.layers[2].origin.set(sin, cos, sin);
    ref.current.layers[3].origin.set(cos, sin, cos);
    ref.current.layers[4].offset.set(cos, sin, cos);
  });
  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.dragon.geometry}
        // material={materials["Default OBJ.001"]}
      >
        <DebugLayerMaterial ref={ref} color="#ffffff">
          {/* <Noise /> */}

          <Depth
            colorA="#ff0080"
            colorB="black"
            alpha={1}
            mode="normal"
            near={0.5 * gradient}
            far={0.5}
            origin={[0, 0, 0]}
          />
          <Depth
            colorA="blue"
            colorB="#f7b955"
            alpha={1}
            mode="add"
            near={2 * gradient}
            far={2}
            origin={[0, 1, 1]}
          />
          <Depth
            colorA="green"
            colorB="#f7b955"
            alpha={1}
            mode="add"
            near={3 * gradient}
            far={3}
            origin={[0, 1, -1]}
          />
          <Depth
            colorA="white"
            colorB="red"
            alpha={1}
            mode="overlay"
            near={1.5 * gradient}
            far={1.5}
            origin={[1, -1, -1]}
          />
          <Noise
            colorA={"#e0c8b1"}
            colorB={"#ee0000"}
            colorC={"#fefefe"}
            colorD={"#fefefe"}
            scale={10.379999999999937}
            offset={[0, 0, 0]}
            name={"noise"}
            type={"perlin"}
            mode="subtract"
          />
          <Fresnel
            mode="add"
            color="white"
            intensity={0.5}
            power={1.5}
            bias={0.05}
          />
        </DebugLayerMaterial>
        <Edges color="white" />
      </mesh>
    </group>
  );
}

useGLTF.preload("./models/dragon.gltf");
